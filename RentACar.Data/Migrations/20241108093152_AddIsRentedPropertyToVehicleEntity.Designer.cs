// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentACar.Data;

#nullable disable

namespace RentACar.Data.Migrations
{
    [DbContext(typeof(RentACarDbContext))]
    [Migration("20241108093152_AddIsRentedPropertyToVehicleEntity")]
    partial class AddIsRentedPropertyToVehicleEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RentACar.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RentACar.Data.Models.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the branch.");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The address of the branch.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)")
                        .HasComment("The city of the branch.");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The country of the branch.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the branch.");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0e1d2c3-b4a5-6789-abcd-1234567890ab"),
                            Address = "1 Vitosha Blvd",
                            City = "Sofia",
                            Country = "Bulgaria",
                            Name = "Sofia Central"
                        },
                        new
                        {
                            Id = new Guid("c3d2e1f0-a4b5-6789-bcad-2345678901bc"),
                            Address = "42 Maritsa Blvd",
                            City = "Plovdiv",
                            Country = "Bulgaria",
                            Name = "Plovdiv Downtown"
                        },
                        new
                        {
                            Id = new Guid("d4c3b2a1-f5e6-7890-cbad-3456789012cd"),
                            Address = "15 Primorski Blvd",
                            City = "Varna",
                            Country = "Bulgaria",
                            Name = "Varna Sea Garden"
                        },
                        new
                        {
                            Id = new Guid("e5f4c3b2-a6d5-7890-dabc-4567890123de"),
                            Address = "1 Aeroport Street",
                            City = "Burgas",
                            Country = "Bulgaria",
                            Name = "Burgas Airport"
                        },
                        new
                        {
                            Id = new Guid("f6e5d4c3-b7a6-8901-ecbd-5678901234ef"),
                            Address = "24 Svoboda Square",
                            City = "Ruse",
                            Country = "Bulgaria",
                            Name = "Ruse Center"
                        },
                        new
                        {
                            Id = new Guid("a7f6e5d4-c8b7-9012-faec-6789012345f0"),
                            Address = "9 Tsar Simeon Blvd",
                            City = "Stara Zagora",
                            Country = "Bulgaria",
                            Name = "Stara Zagora"
                        },
                        new
                        {
                            Id = new Guid("b8a7f6e5-d9c8-0123-0af1-7890123456a1"),
                            Address = "2 Tsarevets Str",
                            City = "Veliko Tarnovo",
                            Country = "Bulgaria",
                            Name = "Veliko Tarnovo Old Town"
                        },
                        new
                        {
                            Id = new Guid("c9b8a7f6-e0d9-1234-1ba2-8901234567b2"),
                            Address = "11 Bulgaria Blvd",
                            City = "Pleven",
                            Country = "Bulgaria",
                            Name = "Pleven Central"
                        });
                });

            modelBuilder.Entity("RentACar.Data.Models.Engine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CylindersCount")
                        .HasColumnType("int")
                        .HasComment("The cylinders count of the engine.");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Optional description of the engine.");

                    b.Property<decimal>("Displacement")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The measurement of the total volume of all of an engine's cylinders.");

                    b.Property<decimal>("FuelEfficiency")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("How much the engine burns per 100km.");

                    b.Property<int>("FuelType")
                        .HasColumnType("int")
                        .HasComment("The type of fuel that the engine uses.");

                    b.Property<int>("HP")
                        .HasColumnType("int")
                        .HasComment("The horse power of the engine.");

                    b.Property<bool>("IsElectric")
                        .HasColumnType("bit")
                        .HasComment("Whether the engine is electric or not.");

                    b.Property<int?>("Torque")
                        .HasColumnType("int")
                        .HasComment("The torque of the car in Nm.");

                    b.HasKey("Id");

                    b.ToTable("Engines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d3c0f7f-8b2b-4a7c-8c5d-3b9b0d3f1e7a"),
                            CylindersCount = 4,
                            Description = "2.0L 4-cylinder gasoline engine with moderate power.",
                            Displacement = 2.0m,
                            FuelEfficiency = 8.5m,
                            FuelType = 0,
                            HP = 150,
                            IsElectric = false,
                            Torque = 200
                        },
                        new
                        {
                            Id = new Guid("a2c93a4c-7e2b-4d3a-92d9-9e5b2b2d5c8f"),
                            CylindersCount = 4,
                            Description = "2.5L diesel engine, suitable for high-torque applications.",
                            Displacement = 2.5m,
                            FuelEfficiency = 6.0m,
                            FuelType = 1,
                            HP = 180,
                            IsElectric = false,
                            Torque = 400
                        },
                        new
                        {
                            Id = new Guid("e62d62f1-d2b2-4e4d-b5f2-8d4d3c6f1e5b"),
                            CylindersCount = 0,
                            Description = "Electric engine with high torque output.",
                            Displacement = 0.0m,
                            FuelEfficiency = 0.0m,
                            FuelType = 2,
                            HP = 300,
                            IsElectric = true,
                            Torque = 600
                        },
                        new
                        {
                            Id = new Guid("0c5f3e2f-a1b3-4f6e-a7f8-b2d5c8e4a2c9"),
                            CylindersCount = 8,
                            Description = "4.0L V8 high-performance gasoline engine.",
                            Displacement = 4.0m,
                            FuelEfficiency = 12.5m,
                            FuelType = 0,
                            HP = 450,
                            IsElectric = false,
                            Torque = 500
                        },
                        new
                        {
                            Id = new Guid("3d2b1f6e-7e4c-8d3f-b2d5-a5f8c6e3b4c7"),
                            CylindersCount = 4,
                            Description = "1.8L hybrid engine with fuel efficiency for city driving.",
                            Displacement = 1.8m,
                            FuelEfficiency = 5.0m,
                            FuelType = 3,
                            HP = 200,
                            IsElectric = false,
                            Torque = 300
                        });
                });

            modelBuilder.Entity("RentACar.Data.Models.Make", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the make.");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Country of the make.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of the make.");

                    b.HasKey("Id");

                    b.ToTable("Makes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d3c0f7f-8b2b-4a7c-8c5d-3b9b0d3f1e7a"),
                            Country = "Japan",
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = new Guid("a2c93a4c-7e2b-4d3a-92d9-9e5b2b2d5c8f"),
                            Country = "United States",
                            Name = "Ford"
                        },
                        new
                        {
                            Id = new Guid("e62d62f1-d2b2-4e4d-b5f2-8d4d3c6f1e5b"),
                            Country = "Germany",
                            Name = "BMW"
                        },
                        new
                        {
                            Id = new Guid("0c5f3e2f-a1b3-4f6e-a7f8-b2d5c8e4a2c9"),
                            Country = "South Korea",
                            Name = "Hyundai"
                        },
                        new
                        {
                            Id = new Guid("3d2b1f6e-7e4c-8d3f-b2d5-a5f8c6e3b4c7"),
                            Country = "France",
                            Name = "Renault"
                        },
                        new
                        {
                            Id = new Guid("f1b3d7e4-a2c6-8f5b-7e4d-d3f2c5b1a6f7"),
                            Country = "Sweden",
                            Name = "Volvo"
                        },
                        new
                        {
                            Id = new Guid("a1c7b2d3-f8e6-4d5b-7c3a-8f6e4b1c5d2b"),
                            Country = "Germany",
                            Name = "Audi"
                        },
                        new
                        {
                            Id = new Guid("e3d6f2c1-7b2f-5a4c-b8d6-a7c9f3e5d1b2"),
                            Country = "Germany",
                            Name = "Mercedes-Benz"
                        },
                        new
                        {
                            Id = new Guid("b2d8f3a6-c7e1-4d5b-8a9f-e6f3d2c7b5a1"),
                            Country = "Italy",
                            Name = "Lamborghini"
                        },
                        new
                        {
                            Id = new Guid("d5b1c6e3-a7f8-4d2b-b9f3-e1c5a2f6d8b3"),
                            Country = "Germany",
                            Name = "Porsche"
                        });
                });

            modelBuilder.Entity("RentACar.Data.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the payment.");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount of the payment.");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2")
                        .HasComment("The date of payment.");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int")
                        .HasComment("The method of the payment.");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("The status of the payment.");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("RentACar.Data.Models.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the rental.");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the customer.");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("The rental ending date.");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the payment.");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("The rental starting date.");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total price of the rental.");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("RentACar.Data.Models.Transmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the transmission.");

                    b.Property<int>("GearsCount")
                        .HasColumnType("int")
                        .HasComment("The count of gears for the transmission.");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("The type of the transmission(manual or automatic).");

                    b.HasKey("Id");

                    b.ToTable("Transmissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7c0d5b2-98c3-4a75-85d8-8d0c36b22929"),
                            GearsCount = 5,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("b44f8362-d0c7-4a69-a72b-9073b09f4a54"),
                            GearsCount = 6,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("dc7eabfa-3e7f-4cc3-b4ef-e0f2168749c4"),
                            GearsCount = 8,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("a60b3780-f473-4e25-8e5c-04e4f5572db8"),
                            GearsCount = 7,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("b5f1426e-1b8d-4459-9b8e-2985db88f48e"),
                            GearsCount = 9,
                            Type = 1
                        });
                });

            modelBuilder.Entity("RentACar.Data.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the vehicle.");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasComment("The date of addition of the car.");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The place from which the customer can take the car.");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Color of the car.");

                    b.Property<int>("DoorsCount")
                        .HasColumnType("int")
                        .HasComment("The number of doors of the car.");

                    b.Property<Guid>("EngineId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Id of the engine.");

                    b.Property<string>("ImageUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)")
                        .HasDefaultValue("/img/no-image.jpg")
                        .HasComment("Url of the image of the car.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRented")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MakeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Id of the vehicle make.");

                    b.Property<int>("Mileage")
                        .HasColumnType("int")
                        .HasComment("Mileage of the car.");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The model of the car.");

                    b.Property<decimal>("PricePerDay")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The price of the vehicle per day.");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasComment("The registration number of the car.");

                    b.Property<Guid?>("RentalId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id of the current rental for this car.");

                    b.Property<int>("SeatsCount")
                        .HasColumnType("int")
                        .HasComment("The number of seats of the car.");

                    b.Property<Guid>("TransmissionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Id of the transmission of the car.");

                    b.Property<string>("VINNumber")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)")
                        .HasComment("The VIN number of the car.");

                    b.Property<Guid>("VehicleTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Id of the type of the vehicle(SUV,Coupe,HatchBack...).");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2")
                        .HasComment("Year of manufacturing.");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("EngineId");

                    b.HasIndex("MakeId");

                    b.HasIndex("RentalId");

                    b.HasIndex("TransmissionId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a6fbd63-0c0e-4b82-a5c5-c50f9de6ec12"),
                            AddedOn = new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = new Guid("f0e1d2c3-b4a5-6789-abcd-1234567890ab"),
                            Color = "Red",
                            DoorsCount = 4,
                            EngineId = new Guid("3d2b1f6e-7e4c-8d3f-b2d5-a5f8c6e3b4c7"),
                            ImageUrl = "/img/toyota-camry-red.jfif",
                            IsDeleted = false,
                            IsRented = false,
                            MakeId = new Guid("1d3c0f7f-8b2b-4a7c-8c5d-3b9b0d3f1e7a"),
                            Mileage = 15000,
                            Model = "Camry",
                            PricePerDay = 50.00m,
                            RegistrationNumber = "ABC123",
                            SeatsCount = 5,
                            TransmissionId = new Guid("f7c0d5b2-98c3-4a75-85d8-8d0c36b22929"),
                            VINNumber = "1HGBH41JXMN109186",
                            VehicleTypeId = new Guid("4b8bfe96-e6b2-41e6-b14c-bf2e5d3a49a0"),
                            Year = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d9e0f547-3b8e-42a6-a8a5-6c74ec9b0154"),
                            AddedOn = new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = new Guid("f0e1d2c3-b4a5-6789-abcd-1234567890ab"),
                            Color = "Grey",
                            DoorsCount = 4,
                            EngineId = new Guid("0c5f3e2f-a1b3-4f6e-a7f8-b2d5c8e4a2c9"),
                            ImageUrl = "/img/Ford-F150-grey.jfif",
                            IsDeleted = false,
                            IsRented = false,
                            MakeId = new Guid("a2c93a4c-7e2b-4d3a-92d9-9e5b2b2d5c8f"),
                            Mileage = 20000,
                            Model = "F-150",
                            PricePerDay = 75.00m,
                            RegistrationNumber = "XYZ789",
                            SeatsCount = 5,
                            TransmissionId = new Guid("dc7eabfa-3e7f-4cc3-b4ef-e0f2168749c4"),
                            VINNumber = "2FTRX18L8XCA12345",
                            VehicleTypeId = new Guid("d53bda92-d23e-4c0d-bd8f-1b47a4e74c7f"),
                            Year = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e6c4c94a-8c92-44f4-a213-7bdbf3e5a57f"),
                            AddedOn = new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = new Guid("f0e1d2c3-b4a5-6789-abcd-1234567890ab"),
                            Color = "Black",
                            DoorsCount = 4,
                            EngineId = new Guid("a2c93a4c-7e2b-4d3a-92d9-9e5b2b2d5c8f"),
                            ImageUrl = "/img/BMW-X5-black.jpg",
                            IsDeleted = false,
                            IsRented = false,
                            MakeId = new Guid("e62d62f1-d2b2-4e4d-b5f2-8d4d3c6f1e5b"),
                            Mileage = 25000,
                            Model = "X5",
                            PricePerDay = 100.00m,
                            RegistrationNumber = "LMN456",
                            SeatsCount = 5,
                            TransmissionId = new Guid("b44f8362-d0c7-4a69-a72b-9073b09f4a54"),
                            VINNumber = "3MZBN1V75AM108070",
                            VehicleTypeId = new Guid("f8c4b74f-1b2e-4714-b61a-8e1bcff0f008"),
                            Year = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c59b3736-645b-471b-9c0b-205792c82b8e"),
                            AddedOn = new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = new Guid("f0e1d2c3-b4a5-6789-abcd-1234567890ab"),
                            Color = "White",
                            DoorsCount = 4,
                            EngineId = new Guid("3d2b1f6e-7e4c-8d3f-b2d5-a5f8c6e3b4c7"),
                            ImageUrl = "/img/Toyota-Corolla-white.jpg",
                            IsDeleted = false,
                            IsRented = false,
                            MakeId = new Guid("1d3c0f7f-8b2b-4a7c-8c5d-3b9b0d3f1e7a"),
                            Mileage = 5000,
                            Model = "Corolla",
                            PricePerDay = 45.00m,
                            RegistrationNumber = "JKL012",
                            SeatsCount = 5,
                            TransmissionId = new Guid("dc7eabfa-3e7f-4cc3-b4ef-e0f2168749c4"),
                            VINNumber = "5YFBURHE8JP123456",
                            VehicleTypeId = new Guid("4b8bfe96-e6b2-41e6-b14c-bf2e5d3a49a0"),
                            Year = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("RentACar.Data.Models.VehicleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Identifier of the vehicle type.");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description of the vehicle type.");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasDefaultValue("/img/no-image.jpg")
                        .HasComment("The image url of the vehicle type.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of the vehicle type.");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b8bfe96-e6b2-41e6-b14c-bf2e5d3a49a0"),
                            Description = "A sedan is a passenger car in a three-box configuration with separate compartments forengine, passenger, and cargo.",
                            ImageUrl = "/img/sedan-img.jpg",
                            Name = "Sedan"
                        },
                        new
                        {
                            Id = new Guid("6f1b99c8-749f-4cf7-a30c-5d576b5098e6"),
                            Description = "A hatchback is a car design featuring a rear door that swings upwards and typically has ashared volume for the passenger and cargo areas.",
                            ImageUrl = "/img/hatchback-img.jpg",
                            Name = "Hatchback"
                        },
                        new
                        {
                            Id = new Guid("83e0b3af-1f02-4b68-8e3b-87d469243024"),
                            Description = "A coupe is a car with a fixed roof and a sporty appearance, typically with two doors.",
                            ImageUrl = "/img/coupe-img.jpg",
                            Name = "Coupe"
                        },
                        new
                        {
                            Id = new Guid("f8c4b74f-1b2e-4714-b61a-8e1bcff0f008"),
                            Description = "An SUV, or sport utility vehicle, combines elements of road-going passenger cars with offroad vehicles.",
                            ImageUrl = "/img/suv-img.jpg",
                            Name = "SUV"
                        },
                        new
                        {
                            Id = new Guid("2f60f64b-3c93-466f-b0f1-7b4005b5c75f"),
                            Description = "A sports car is designed for high speed and performance, typically featuring a low bodyand powerful engine.",
                            ImageUrl = "/img/sportscar-img.jpg",
                            Name = "Sportscar"
                        },
                        new
                        {
                            Id = new Guid("e2dc1b1c-cc60-4058-8e12-03f06c5a3688"),
                            Description = "A convertible is a car with a flexible roof that can be either fully or partially opened.",
                            ImageUrl = "/img/convertible-img.jpg",
                            Name = "Convertible"
                        },
                        new
                        {
                            Id = new Guid("7b9c1cc8-0f3a-4b9f-8517-1b798e63f8b1"),
                            Description = "A crossover is a vehicle that combines features of a passenger vehicle with those of asport utility vehicle.",
                            ImageUrl = "/img/crossover-img.jpg",
                            Name = "Crossover"
                        },
                        new
                        {
                            Id = new Guid("97e1e204-7990-4c76-9b9f-4d60e5e2a44f"),
                            Description = "A muscle car is a high-performance vehicle that emphasizes power and speed, often with alarger engine.",
                            ImageUrl = "/img/musclecar-img.jpg",
                            Name = "Muscle Car"
                        },
                        new
                        {
                            Id = new Guid("5c6c3d85-4a4c-4b9f-a0b4-fd6d6b21a38f"),
                            Description = "A station wagon is a car with an extended body and a hatch door at the back, offering mor cargo space.",
                            ImageUrl = "/img/stationwagon-img.jpg",
                            Name = "Station Wagon"
                        },
                        new
                        {
                            Id = new Guid("d53bda92-d23e-4c0d-bd8f-1b47a4e74c7f"),
                            Description = "A pickup truck features an open cargo area with low sides and a tailgate, suitable fortransporting goods.",
                            ImageUrl = "/img/pickuptruck-img.jpg",
                            Name = "Pickup Truck"
                        },
                        new
                        {
                            Id = new Guid("8f5b0e36-d27a-4cf2-a22d-06c24094c62a"),
                            Description = "A Jeep is a rugged vehicle often designed for off-road use, characterized by a high groun clearance.",
                            ImageUrl = "/img/jeep-img.jpg",
                            Name = "Jeep"
                        },
                        new
                        {
                            Id = new Guid("bbab29d3-b20a-42c8-b7b8-0b012f2d186b"),
                            Description = "A limousine is a large, luxurious vehicle, often associated with high-end transport.",
                            ImageUrl = "/img/limousine-img.jpg",
                            Name = "Limousine"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RentACar.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RentACar.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RentACar.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RentACar.Data.Models.Rental", b =>
                {
                    b.HasOne("RentACar.Data.Models.ApplicationUser", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("RentACar.Data.Models.Vehicle", b =>
                {
                    b.HasOne("RentACar.Data.Models.Branch", "Branch")
                        .WithMany("Vehicles")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.Engine", "Engine")
                        .WithMany()
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.Make", "Make")
                        .WithMany("Vehicles")
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.Rental", "Rental")
                        .WithMany()
                        .HasForeignKey("RentalId");

                    b.HasOne("RentACar.Data.Models.Transmission", "Transmission")
                        .WithMany()
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentACar.Data.Models.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Engine");

                    b.Navigation("Make");

                    b.Navigation("Rental");

                    b.Navigation("Transmission");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("RentACar.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("RentACar.Data.Models.Branch", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("RentACar.Data.Models.Make", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("RentACar.Data.Models.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
